{"version":3,"sources":["logo.png","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","newSearchString","foundCityByLocation","foundCityByName","myCity","lat","lon","hasWeatherData","weatherData","temperature","handleSubmit","bind","handleTextChange","e","preventDefault","searchstring","this","length","cities","filter","city","name","console","log","setState","coord","getWeatherData","url","axios","get","then","res","weather","data","current","temp","toFixed","target","value","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","toPrecision","locationCities","Math","abs","index","i","sum","className","src","logo","alt","onSubmit","country","type","onChange","icon","main","description","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.26c13c58.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.86a2115b.png\";","import React from 'react';\r\nimport logo from '../logo.png';\r\nimport './App.css';\r\nimport cities from \"../assets/city.list.json\";\r\nimport axios from \"axios\"; // comand yarn add axios - to perform the http requests\r\n\r\nexport default class App extends React.Component{\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { \r\n      newSearchString: '', // the search term\r\n      foundCityByLocation: false, // var to check if the user has found the city by its location\r\n      foundCityByName: false, // var to check if the user has found the city by its location\r\n      myCity: [], // The city, or cities found\r\n      lat: 0, // latitude\r\n      lon: 0, // longitute\r\n      hasWeatherData: false,\r\n      weatherData: '',\r\n      temperature: 0\r\n    };\r\n \r\n\r\n    // this.myCity = cities.filter(function (city) {\r\n    //   if (city.id == 3460845) { console.log(city); return city; }\r\n    // });\r\n \r\n    //this.testCity = this.myCity.shift();\r\n    // this.getWeatherData = this.getWeatherData.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleTextChange = this.handleTextChange.bind(this);\r\n    \r\n  }\r\n \r\n  handleSubmit(e){\r\n    // To prevente page from refresh\r\n    e.preventDefault();\r\n    let searchstring = this.state.newSearchString;\r\n\r\n    if (searchstring.length > 0){\r\n      this.myCity = cities.filter(function (city) {\r\n        if (city.name == searchstring) { console.log(city); return city; }\r\n      });\r\n\r\n      if (this.myCity.length > 0){\r\n        this.setState({\r\n          myCity: this.myCity[0],\r\n          lat: this.myCity[0].coord.lat,\r\n          lon: this.myCity[0].coord.lon\r\n        })\r\n        this.getWeatherData();\r\n      }\r\n\r\n    }else{ // If the search field is empty, let find the weather based on location...\r\n      this.getWeatherData();\r\n    }\r\n\r\n  }\r\n  \r\n  getWeatherData(){\r\n    let lat = this.state.lat;\r\n    let lon = this.state.lon;\r\n    let url = 'https://api.openweathermap.org/data/2.5/onecall?lat='+lat+'&lon='+lon+'&exclude=hourly,minutely&units=metric&appid=a9d12df6c21e95231c7157c8b3cab58c';\r\n     \r\n    axios.get(url)\r\n    .then(res => {\r\n      console.log(res);\r\n\r\n      const weather = res.data.current.weather[0];\r\n      var temperature = res.data.current.temp;\r\n      temperature = temperature.toFixed(1);\r\n\r\n      console.log(res.data);\r\n      console.log(weather);\r\n      console.log(temperature);\r\n      // console.log(res.data.data);\r\n      // console.log(res.data.data.current);\r\n      //console.log(res.data.current.weather[0].description)\r\n      // console.log(res.data.data.current.weather);\r\n      \r\n      this.setState({\r\n          weatherData: weather,\r\n          hasWeatherData: true,\r\n          temperature: temperature,\r\n      })\r\n\r\n      //this.setState({ persons });\r\n    })\r\n  }\r\n\r\n  handleTextChange(e){\r\n    this.setState({\r\n      newSearchString: e.target.value\r\n    });\r\n    \r\n  }\r\n\r\n  // This method is called first\r\n  componentDidMount() { \r\n    // get location from browser\r\n    if (\"geolocation\" in navigator) {\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        console.log(\"Latitude is :\", position.coords.latitude);\r\n        console.log(\"Longitude is :\", position.coords.longitude);\r\n        \r\n        let latitude = position.coords.latitude.toPrecision(6);\r\n        let longitude = position.coords.longitude.toPrecision(6);\r\n    \r\n        this.setState({\r\n          lat: latitude,\r\n          lon: longitude,\r\n        });\r\n        \r\n        \r\n        let locationCities = cities.filter(function (city) {\r\n           // Get cities in some lat and lon range from location\r\n           if(\r\n                (latitude - city.coord.lat < 0.1) && (Math.abs(latitude - city.coord.lat) > 0) &&  (Math.abs(latitude - city.coord.lat) < 0.1) \r\n                && \r\n                (longitude - city.coord.lon < 0.1) && (Math.abs(longitude - city.coord.lon) > 0) &&  (Math.abs(longitude - city.coord.lon) < 0.1) \r\n              ) \r\n             {\r\n              return city;\r\n            }\r\n\r\n        });\r\n\r\n        // If there are more than one city, find the most accurate one, by proximity with lat and lon values.\r\n        if(locationCities.length == 0){\r\n          this.setState({\r\n            foundCityByLocation: false\r\n          })\r\n        }else{        \r\n          if(locationCities.length > 1){\r\n\r\n            var index = 0;\r\n            var value = 5.00000000;\r\n            for (var i = 0; i < locationCities.length; i++) {\r\n              let val1 = Math.abs(longitude - locationCities[i].coord.lon);\r\n              let val2 = Math.abs(latitude - locationCities[i].coord.lat);\r\n              let sum = val1+val2;\r\n              console.log(sum);\r\n              if (sum < value) {\r\n                value = sum;\r\n                index = i;\r\n              }\r\n            }\r\n\r\n            // Set the most accurate city based on location, in the state.\r\n            this.setState({\r\n              myCity: locationCities[index],\r\n              foundCityByLocation: true,\r\n              lat: locationCities[index].coord.lat,\r\n              lon:locationCities[index].coord.lon\r\n            })\r\n\r\n          }else{\r\n             // Has found just one city\r\n             this.setState({\r\n              myCity: locationCities[0],\r\n              foundCityByLocation: true,\r\n              lat: locationCities[0].coord.lat,\r\n              lon:locationCities[0].coord.lon\r\n            })\r\n          }\r\n        }\r\n      });\r\n \r\n    } else {\r\n      // Do not have permission to use location...\r\n      this.setState({\r\n        foundCityByLocation: false\r\n      })\r\n    }\r\n  }\r\n\r\n  \r\n  render(){\r\n    const hasWeatherData = this.state.hasWeatherData;\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <h4>\r\n            Allow and confirm your location\r\n          </h4>\r\n          <form onSubmit={this.handleSubmit}>\r\n          {/* {this.state.myCity.length > 0 && */}\r\n            <p>{this.state.myCity.name} - {this.state.myCity.country}</p> \r\n          {/* } */}\r\n            <button type=\"submit\">Go</button>\r\n            <h6>\r\n              ... or enter one below\r\n            </h6>\r\n          \r\n            <input value={this.newSearchString} onChange={this.handleTextChange}/>\r\n            \r\n          </form>\r\n          <div>\r\n          {hasWeatherData\r\n            ? <div><h1>{this.state.temperature} °C</h1><img src={`http://openweathermap.org/img/w/${this.state.weatherData.icon}.png`}></img> {this.state.weatherData.main}</div>\r\n            : <p></p>\r\n          }\r\n          {hasWeatherData\r\n            ? <div><i>{this.state.weatherData.description}</i></div>\r\n            : <p></p>\r\n          }\r\n        \r\n          </div>\r\n          </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// export default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}